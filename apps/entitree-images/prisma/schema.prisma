generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env( "MONGODB_URI" )
  }

model Image {
  id_                       String                            @id @default(auto()) @db.ObjectId @map("_id")
  id                        Int                            
  comment                   String?
  createdAt                 DateTime                          @db.Date @default(now())
  createdBy                 String?                           @db.ObjectId
  faceDetectionGoogleVision Json?
  fileSize                  Int?
  internalFileName          String?
  mimetype                  String?
  name                      String?
  originalFilename          String?
  recordedDate              DateTime?                         @db.Date
  sourceUrl                 String?
  statusBackgroundRemoval   String?
  statusGoogleFaceDetection String?
  statusImageCropping       String
  updatedAt                 DateTime                          @db.Date @default(now())
  uploadSite                String
  viewCount                 Int
  wikidataEntity            Int
  wikidataLabel             String?
  wikidataP31               String?
}

//https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  updatedAt     DateTime? @db.Date

  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id            String    @id @default(cuid()) @map("_id")
  identifier String   
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
